from flask import Flask, request, jsonify, send_file
from flask_cors import CORS
import subprocess
import os
import tempfile
import zipfile

app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

@app.route('/upload', methods=['POST'])
def upload_file():
    file = request.files['file']
    paces = request.form['paces']
    time = request.form['time']
    is_loop = '-l' if request.form.get('loop') == 'true' else ''

    # Save the uploaded file temporarily
    save_directory = os.path.join(os.path.dirname(__file__), '..', 'perfect_pace_data')
    if not os.path.exists(save_directory):
        os.makedirs(save_directory)
    file_path = os.path.join(save_directory, file.filename)
    file.save(file_path)

    # Paths for the output JSON and TXT files
    output_json_path = None
    output_txt_path = None
    output_mile_txt_path = None

    try:
        # Run the Python script with the flags
        print(file_path)
        os.chdir("src/")
        #TODO change brute force to run LP as well
        result = subprocess.run(
            ['python', 'main.py', '-f', file_path, '-t', time, '-p', paces, '-m', "brute_force"] + ([is_loop] if is_loop else []),
            capture_output=True,
            text=True
        )
        print(result)
        os.chdir("..")
        # Define output file names
        base_filename = file.filename.split('.')[0]
        output_json_path = os.path.join('..', 'perfect_pace_data', 'results', base_filename,'BF', f"{time}min_{paces}p.json")
        output_txt_path = os.path.join('..', 'perfect_pace_data', 'results', base_filename,'BF', f"{time}min_{paces}p_segments.txt")
        output_mile_txt_path = os.path.join('..', 'perfect_pace_data', 'results', base_filename,'BF', f"{time}min_{paces}p_miles.csv")
        print(output_json_path)
        # Assume that both files are generated by the script
        if not os.path.exists(output_json_path) or not os.path.exists(output_txt_path) or not os.path.exists(output_mile_txt_path):
            print("GEN FILES NOT FOUND")
            return jsonify({'error': 'Generated files not found'}), 500

    except Exception as e:
        print(f"Error: {e}")
        return jsonify({'error': str(e)}), 500
    finally:
        os.remove(file_path)  # Clean up the uploaded file

    # Create a zip file with both files

    zip_filename = f"{base_filename}_{time}min_{paces}p.zip"
    zip_file_path = os.path.join(save_directory, zip_filename)
    with zipfile.ZipFile(zip_file_path, 'w') as zipf:
        zipf.write(output_json_path, os.path.basename(output_json_path))
        zipf.write(output_txt_path, os.path.basename(output_txt_path))
        zipf.write(output_mile_txt_path, os.path.basename(output_mile_txt_path))
        
    # Return the zip file
    return send_file(zip_file_path, as_attachment=True, mimetype='application/zip')

if __name__ == '__main__':
    app.run(debug=True)
